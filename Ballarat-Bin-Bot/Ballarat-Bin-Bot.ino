// Ballarat Bin Bot by ObsoleteNerd (https://obsoletenerd.com/)
// Pulls rubbish truck data from the Ballarat.vic.gov.au API to tell you when to put which bins out for collection!
// Source: https://github.com/obsoletenerd/ballarat-bin-bot/

#include <Wire.h>
#include <HTTPClient.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFiManager.h> // https://github.com/tzapu/WiFiManager
#include <ArduinoJson.h> // https://arduinojson.org/v6/example/parser/

// Edit the address after q= in this URL, making sure to put %20 wherever there's a space in your address
// eg: q=123%20High%20Street%20Sebastapol for "123 High Street Sebastapol"
const char *host = "https://data.ballarat.vic.gov.au/api/records/1.0/search/?sort=propnum&q=123%20High%20Street%20Sebastapol&rows=100&dataset=waste-collection-days&timezone=Australia/Melbourne&lang=en";

unsigned long timerDelay = 86400000; // 10000 = 10 seconds for testing, or timer set to 86400000 for daily in production

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Splashscreen
static const uint8_t image_data_Saraarray[1024] = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xcf, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xcf, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x87, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x07, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x07, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x0b, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x14, 0x1f, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x20, 0x07, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xa0, 0x01, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x01, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0x07, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xc3, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0x1f, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xc3, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0x38, 0xfc, 0x63, 0xfe, 0x01, 0xf8, 0xc4, 0x01, 0xe3, 0xc0, 0x43, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0x60, 0x78, 0x00, 0xfe, 0x01, 0x08, 0x40, 0x01, 0x81, 0x80, 0x03, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0x60, 0x30, 0x00, 0x7e, 0x31, 0x08, 0x40, 0x21, 0x80, 0x80, 0x03, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0xc0, 0x30, 0x00, 0x7e, 0x31, 0x08, 0x00, 0x21, 0x00, 0x00, 0x03, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x31, 0x08, 0x00, 0x21, 0x08, 0x71, 0xc3, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x31, 0x08, 0x00, 0x21, 0x08, 0x71, 0xc3, 
	0xff, 0xff, 0xff, 0x01, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x01, 0x08, 0x00, 0x01, 0x08, 0x71, 0xc3, 
	0xff, 0xff, 0xff, 0x81, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x01, 0x08, 0x00, 0x01, 0x08, 0x71, 0xc3, 
	0xff, 0xff, 0xff, 0xf1, 0x8c, 0xc0, 0x11, 0x8c, 0x7e, 0x01, 0x08, 0x00, 0x03, 0x08, 0x71, 0xc3, 
	0xff, 0xff, 0xff, 0x99, 0x8c, 0xc0, 0x11, 0x8c, 0x7e, 0x01, 0x08, 0x00, 0x01, 0x08, 0x71, 0xc3, 
	0xff, 0xff, 0xe0, 0x19, 0x8c, 0xc0, 0x11, 0x8c, 0x7e, 0x31, 0x08, 0x40, 0x21, 0x08, 0x71, 0xe7, 
	0xff, 0xff, 0xe0, 0x19, 0x8c, 0xc0, 0x11, 0x8c, 0x7e, 0x21, 0x08, 0x40, 0x21, 0x08, 0x71, 0xff, 
	0xff, 0xff, 0xe0, 0x11, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x01, 0x08, 0x40, 0x01, 0x80, 0xf1, 0xe7, 
	0xff, 0xff, 0x00, 0x11, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x03, 0x08, 0x40, 0x03, 0x80, 0xf1, 0xc3, 
	0xff, 0xff, 0x80, 0x31, 0x8c, 0xc2, 0x11, 0x8c, 0x7e, 0x07, 0x08, 0x40, 0x07, 0xc1, 0xf1, 0xe7, 
	0xff, 0xbc, 0xe0, 0xf9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x80, 0xf0, 0x38, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0x38, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0x30, 0x06, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0x60, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xef, 0xc0, 0x03, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xdc, 0x40, 0x01, 0x80, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x80, 0x60, 0x00, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x30, 0x00, 0x60, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x00, 0x10, 0x00, 0x20, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0x00, 0x18, 0x00, 0x30, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0x00, 0x08, 0x00, 0x10, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf8, 0x00, 0x0c, 0x00, 0x18, 0x0c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x04, 0x00, 0x08, 0x18, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x06, 0x00, 0x08, 0x18, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x02, 0x00, 0x08, 0x31, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0x00, 0x03, 0x00, 0x08, 0x31, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0x00, 0x03, 0x00, 0x08, 0x31, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xe0, 0x00, 0x03, 0x00, 0x18, 0x30, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x03, 0x00, 0x10, 0x18, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf0, 0x00, 0x06, 0x00, 0x30, 0x0c, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0x00, 0x0c, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
 
void setup() {
  Serial.begin(115200);
  
  // Initiate WifiManager
  WiFiManager wm;
  bool res;
  res = wm.autoConnect("BinBotAP","BinBotBestBot!"); // Setup AP if it can't find internet

  // Start I2C Communication SDA = 5 and SCL = 4 on Wemos Lolin32 ESP32 with built-in SSD1306 OLED
  Wire.begin(5, 4);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C, false, false)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  // Set the OLED display up for later
  display.clearDisplay();  
  display.setTextSize(1);
  display.setTextColor(WHITE);

  // Draw the splashscreen
  display.drawBitmap(0, 0, image_data_Saraarray, 128, 64, 1);
  display.display();

  delay(5000); // Let splashscreen show for a few seconds...

  display.clearDisplay();

  // Check for WiFi Connection
  if(!res) {
      Serial.println("Failed to connect to WiFi");

      display.setCursor(0, 10);
      // Display static text
      display.println("Failed to connect to WiFi");
      display.display(); 
  } 
  else {
      Serial.println("Connected to WiFi");

      display.setCursor(0, 10);
      display.println("Connected to Wifi");
      display.display(); 
  }
}
 
void loop() {
  HTTPClient http;

    Serial.print("Request URL: ");
    Serial.println(host);

    http.begin(host);
    int httpCode = http.GET(); // Send the HTTP GET request
    String payload = http.getString(); // Grab the payload

    Serial.print("HTTP Response Code:");
    Serial.println(httpCode); // Print http code to serial (200 = OK)

    Serial.print("Payload Received:");
    Serial.println(payload); // Print the raw payload to serial for debugging
    
    if(httpCode == 200)
    {
      display.clearDisplay();
      display.setCursor(0, 30);
      display.print("Processing Data...");
      display.display(); 

      // Allocate JsonBuffer (arduinojson.org/assistant)
      StaticJsonDocument<1024> doc;
      DeserializationError error = deserializeJson(doc, payload);

      // Test if parsing succeeds.
      if (error) {
        Serial.print(F("deserializeJson() failed: "));
        Serial.println(error.f_str());
        return;
      }
    
      // Extract values we need
      int addressFound = doc["nhits"]; // 1 = Yes, 0 = No
      JsonObject records_0 = doc["records"][0];
      JsonObject records_0_fields = records_0["fields"];
      const char* collectionDay = records_0_fields["collectionday"];
      const char* nextRecycle = records_0_fields["nextrecycle"]; // Format: "2023-03-02"
      const char* nextGreen = records_0_fields["nextgreen"]; // Format: "2023-02-23"
      const char* addressDetected = records_0_fields["address"];
      const char* nextRubbish = records_0_fields["nextwaste"]; // Format: "2023-02-23"
      
      display.clearDisplay();

      if (addressFound == 1) {
        // Print values to serial for debugging
        Serial.print("Next Recycle Bin: ");
        Serial.println(nextRecycle);
        Serial.print("Next Green Bin: ");
        Serial.println(nextGreen);
        Serial.print("Next Rubbish Bin: ");
        Serial.println(nextRubbish);

        // Display on OLED
        display.setCursor(0, 10);
        display.print("Rubbish: ");
        display.setCursor(60, 10);
        display.print(nextRubbish);

        display.setCursor(0, 30);
        display.print("Recycling: ");
        display.setCursor(60, 30);
        display.print(nextRecycle);

        display.setCursor(0, 50);
        display.print("Green: ");
        display.setCursor(60, 50);
        display.print(nextGreen);
      } else {
        display.setCursor(0, 30);
        display.print("Address Error!");
      }

        display.display(); 
    }
    else
    {
      Serial.println("Error in response: ");
      Serial.println(httpCode);

      // Display error on OLED
      display.clearDisplay();

      display.setCursor(0, 30);
      display.print("Error: ");
      display.print(httpCode);

      display.display(); 
    }

    http.end();
    delay(timerDelay);
}